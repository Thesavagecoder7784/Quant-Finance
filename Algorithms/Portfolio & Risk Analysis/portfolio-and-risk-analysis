import numpy as np
import pandas as pd # Using pandas for rolling calculations and easier data handling if needed, though numpy suffices for these functions.

def sharpe_ratio(returns, risk_free_rate=0.0):
    """
    Calculates the Sharpe Ratio.

    The Sharpe Ratio measures the excess return (or risk premium) per unit of
    total risk in an investment. A higher Sharpe Ratio indicates better
    risk-adjusted performance.

    Args:
        returns (np.array or pd.Series): Daily, weekly, or monthly returns of the portfolio.
                                         Ensure returns are consistent with the risk-free rate's
                                         periodicity.
        risk_free_rate (float): The annualized risk-free rate of return.
                                Defaults to 0.0 if not provided.

    Returns:
        float: The Sharpe Ratio. Returns NaN if standard deviation is zero.
    """
    periods_per_year = 252 # Assuming daily returns for equities. Adjust if returns are weekly (52) or monthly (12).
    if risk_free_rate > 0:
        daily_risk_free_rate = (1 + risk_free_rate)**(1/periods_per_year) - 1
    else:
        daily_risk_free_rate = 0.0

    excess_returns = returns - daily_risk_free_rate
    std_dev = np.std(excess_returns)

    if std_dev == 0:
        return np.nan # Avoid division by zero

    # Annualize the Sharpe Ratio
    return np.mean(excess_returns) / std_dev * np.sqrt(periods_per_year)

def sortino_ratio(returns, risk_free_rate=0.0):
    """
    Calculates the Sortino Ratio.

    The Sortino Ratio is a variation of the Sharpe Ratio that differentiates
    harmful volatility (downside deviation) from total overall volatility.
    It measures the excess return per unit of downside risk. A higher Sortino
    Ratio indicates better risk-adjusted performance, specifically considering
    only negative deviations.

    Args:
        returns (np.array or pd.Series): Daily, weekly, or monthly returns of the portfolio.
                                         Ensure returns are consistent with the risk-free rate's
                                         periodicity.
        risk_free_rate (float): The annualized risk-free rate of return.
                                Defaults to 0.0 if not provided.

    Returns:
        float: The Sortino Ratio. Returns NaN if downside deviation is zero.
    """
    periods_per_year = 252 # Assuming daily returns for equities. Adjust if returns are weekly (52) or monthly (12).
    if risk_free_rate > 0:
        daily_risk_free_rate = (1 + risk_free_rate)**(1/periods_per_year) - 1
    else:
        daily_risk_free_rate = 0.0

    excess_returns = returns - daily_risk_free_rate
    downside_returns = excess_returns[excess_returns < 0]

    # Calculate downside deviation (standard deviation of negative excess returns)
    if len(downside_returns) == 0:
        downside_std_dev = 0
    else:
        downside_std_dev = np.std(downside_returns)

    if downside_std_dev == 0:
        return np.nan # Avoid division by zero

    # Annualize the Sortino Ratio
    return np.mean(excess_returns) / downside_std_dev * np.sqrt(periods_per_year)

def max_drawdown(returns):
    """
    Calculates the Maximum Drawdown.

    Maximum Drawdown (MDD) is the largest peak-to-trough decline in the value
    of an investment portfolio, before a new peak is achieved. It is an indicator
    of the downside risk over a specified period.

    Args:
        returns (np.array or pd.Series): Daily, weekly, or monthly returns of the portfolio.

    Returns:
        float: The Maximum Drawdown as a percentage (e.g., -0.25 for 25% drawdown).
               Returns 0.0 if there is no drawdown.
    """
    # Calculate cumulative returns from the start
    cumulative_returns = np.cumprod(1 + returns)
    # Calculate the running maximum (peak)
    peak_value = np.maximum.accumulate(cumulative_returns)
    # Calculate the drawdown
    drawdown = (cumulative_returns - peak_value) / peak_value
    # Find the maximum drawdown
    return np.min(drawdown)

def calmar_ratio(returns, risk_free_rate=0.0):
    """
    Calculates the Calmar Ratio.

    The Calmar Ratio is a risk-adjusted return metric that measures the
    annualized return over the maximum drawdown. It is particularly useful
    for evaluating long-term performance in relation to the largest single
    loss experienced.

    Args:
        returns (np.array or pd.Series): Daily, weekly, or monthly returns of the portfolio.
        risk_free_rate (float): The annualized risk-free rate of return.
                                Defaults to 0.0 if not provided.

    Returns:
        float: The Calmar Ratio. Returns NaN if Max Drawdown is zero.
    """
    # Calculate annualized return
    periods_per_year = 252 # Assuming daily returns
    total_return = np.prod(1 + returns) - 1
    num_years = len(returns) / periods_per_year
    if num_years == 0:
        return np.nan
    annualized_return = (1 + total_return)**(1/num_years) - 1

    # Calculate Maximum Drawdown
    mdd = max_drawdown(returns)

    if mdd == 0:
        return np.nan # Avoid division by zero if no drawdown occurred

    # Calmar Ratio uses absolute value of MDD
    return (annualized_return - risk_free_rate) / abs(mdd)

def jensens_alpha(portfolio_returns, market_returns, risk_free_rate=0.0):
    """
    Calculates Jensen's Alpha.

    Jensen's Alpha measures the excess return of a portfolio above the return
    predicted by the Capital Asset Pricing Model (CAPM). It represents the
    portfolio manager's skill in generating returns beyond what the market risk
    would suggest.

    Alpha = Portfolio Return - [Risk-Free Rate + Beta * (Market Return - Risk-Free Rate)]

    Args:
        portfolio_returns (np.array or pd.Series): Returns of the portfolio.
        market_returns (np.array or pd.Series): Returns of the market index.
        risk_free_rate (float): The annualized risk-free rate of return.
                                Defaults to 0.0 if not provided.

    Returns:
        float: Jensen's Alpha. Returns NaN if beta cannot be calculated.
    """
    if len(portfolio_returns) != len(market_returns) or len(portfolio_returns) < 2:
        print("Error: Portfolio and market returns must have the same length and at least 2 data points for Jensen's Alpha.")
        return np.nan

    periods_per_year = 252 # Assuming daily returns
    if risk_free_rate > 0:
        daily_risk_free_rate = (1 + risk_free_rate)**(1/periods_per_year) - 1
    else:
        daily_risk_free_rate = 0.0

    # Calculate Beta
    covariance = np.cov(portfolio_returns, market_returns)[0, 1]
    market_variance = np.var(market_returns)

    if market_variance == 0:
        print("Warning: Market variance is zero, Beta cannot be calculated for Jensen's Alpha.")
        return np.nan
    
    portfolio_beta = covariance / market_variance

    # Annualize daily returns for CAPM calculation
    annual_portfolio_return = np.prod(1 + portfolio_returns) - 1
    annual_market_return = np.prod(1 + market_returns) - 1

    # Expected return based on CAPM
    expected_return = daily_risk_free_rate + portfolio_beta * (annual_market_return - daily_risk_free_rate) # Use daily RFR for daily returns in beta calculation if needed, but CAPM uses annualized.

    # Jensen's Alpha = (Annualized Portfolio Return - Annualized Risk Free Rate) - Beta * (Annualized Market Return - Annualized Risk Free Rate)
    # The standard formula for Jensen's Alpha uses annualized figures.
    alpha = annual_portfolio_return - (risk_free_rate + portfolio_beta * (annual_market_return - risk_free_rate))
    return alpha


def beta(portfolio_returns, market_returns):
    """
    Calculates the Beta of a portfolio or asset.

    Beta measures the volatility or systematic risk of a security or portfolio
    in comparison to the market as a whole. A Beta of 1 indicates that the
    asset's price tends to move with the market. A Beta greater than 1 means
    it's more volatile than the market, and less than 1 means less volatile.

    Beta = Covariance(Portfolio Returns, Market Returns) / Variance(Market Returns)

    Args:
        portfolio_returns (np.array or pd.Series): Returns of the portfolio.
        market_returns (np.array or pd.Series): Returns of the market index.

    Returns:
        float: The Beta coefficient. Returns NaN if market variance is zero.
    """
    if len(portfolio_returns) != len(market_returns) or len(portfolio_returns) < 2:
        print("Error: Portfolio and market returns must have the same length and at least 2 data points for Beta.")
        return np.nan

    covariance = np.cov(portfolio_returns, market_returns)[0, 1]
    market_variance = np.var(market_returns)

    if market_variance == 0:
        return np.nan # Avoid division by zero

    return covariance / market_variance

def treynor_ratio(portfolio_returns, market_returns, risk_free_rate=0.0):
    """
    Calculates the Treynor Ratio.

    The Treynor Ratio is a risk-adjusted return measure that uses Beta
    (systematic risk) as the denominator instead of total risk (standard deviation).
    It indicates the excess return generated per unit of systematic risk.

    Treynor Ratio = (Portfolio Return - Risk-Free Rate) / Beta

    Args:
        portfolio_returns (np.array or pd.Series): Returns of the portfolio.
        market_returns (np.array or pd.Series): Returns of the market index.
        risk_free_rate (float): The annualized risk-free rate of return.
                                Defaults to 0.0 if not provided.

    Returns:
        float: The Treynor Ratio. Returns NaN if Beta is zero or cannot be calculated.
    """
    portfolio_beta = beta(portfolio_returns, market_returns)

    if np.isnan(portfolio_beta) or portfolio_beta == 0:
        return np.nan # Avoid division by zero or if beta is undefined

    periods_per_year = 252 # Assuming daily returns
    total_portfolio_return = np.prod(1 + portfolio_returns) - 1
    num_years = len(portfolio_returns) / periods_per_year
    if num_years == 0:
        return np.nan
    annualized_portfolio_return = (1 + total_portfolio_return)**(1/num_years) - 1

    return (annualized_portfolio_return - risk_free_rate) / portfolio_beta

def value_at_risk(returns, confidence_level=0.95):
    """
    Calculates the Parametric Value at Risk (VaR).

    Value at Risk (VaR) estimates the potential loss in value of a portfolio
    over a given time period with a certain confidence level. This implementation
    uses the parametric (variance-covariance) method, assuming returns are
    normally distributed.

    VaR = - (Mean Return + Z-score * Standard Deviation of Returns)

    Args:
        returns (np.array or pd.Series): Returns of the portfolio.
        confidence_level (float): The confidence level (e.g., 0.95 for 95% VaR).

    Returns:
        float: The VaR as a negative percentage (e.g., -0.01 for 1% VaR).
               Returns NaN if returns are empty.
    """
    if len(returns) == 0:
        return np.nan

    mean_return = np.mean(returns)
    std_dev_returns = np.std(returns)

    # Z-score for the given confidence level (e.g., 1.645 for 95%, 2.326 for 99%)
    # Use scipy.stats.norm.ppf for more accurate z-score calculation if scipy is available
    # For a simple implementation without scipy, use approximation or pre-defined values
    from scipy.stats import norm
    z_score = norm.ppf(1 - confidence_level) # For a negative VaR (loss)

    # VaR formula: - (mean_return + z_score * std_dev_returns)
    # The sign convention for VaR can vary; here, it will be a negative value representing a loss.
    # If daily VaR, it's this value. If you need annualized, it needs more transformation.
    return -(mean_return + z_score * std_dev_returns)

def cagr(initial_value, final_value, num_years):
    """
    Calculates the Compound Annual Growth Rate (CAGR).

    CAGR is the mean annual growth rate of an investment over a specified period
    longer than one year, assuming the profits are reinvested at the end of the
    period. It smooths out erratic returns.

    CAGR = ( (Final Value / Initial Value)^(1 / Number of Years) ) - 1

    Args:
        initial_value (float): The starting value of the investment.
        final_value (float): The ending value of the investment.
        num_years (int or float): The number of years over which the growth occurred.

    Returns:
        float: The Compound Annual Growth Rate. Returns NaN if initial_value is zero
               or num_years is zero or negative.
    """
    if initial_value <= 0 or num_years <= 0:
        return np.nan # Avoid division by zero or non-positive years

    return ((final_value / initial_value)**(1 / num_years)) - 1


# --- Example Usage ---
if __name__ == "__main__":
    # Example daily returns for a portfolio and a market index (e.g., S&P 500)
    # These are illustrative and not real market data.
    np.random.seed(42)
    num_days = 252 * 3 # 3 years of daily data for better CAGR and other metrics
    daily_portfolio_returns = np.random.normal(0.0007, 0.008, num_days) # Mean daily return 0.07%, std dev 0.8%
    daily_market_returns = np.random.normal(0.0005, 0.007, num_days) # Mean daily return 0.05%, std dev 0.7%

    # Simulate a significant drawdown period for the portfolio
    daily_portfolio_returns[200:250] = np.random.normal(-0.005, 0.01, 50) # Simulate a negative period
    daily_portfolio_returns[500:550] = np.random.normal(-0.003, 0.009, 50) # Another negative period

    # Let's assume an annual risk-free rate of 2%
    annual_risk_free_rate = 0.02

    # Initial and Final values for CAGR demonstration
    initial_portfolio_value = 100000
    final_portfolio_value = initial_portfolio_value * np.prod(1 + daily_portfolio_returns)
    total_years = num_days / 252.0

    print(f"--- Portfolio Performance & Risk Analytics ---")
    print(f"Period: {num_days} trading days (~{total_years:.1f} years)")
    print(f"Annual Risk-Free Rate: {annual_risk_free_rate*100:.2f}%\n")


    # 1. Sharpe Ratio
    sharpe = sharpe_ratio(daily_portfolio_returns, annual_risk_free_rate)
    print(f"1. Sharpe Ratio: {sharpe:.4f}")

    # 2. Sortino Ratio
    sortino = sortino_ratio(daily_portfolio_returns, annual_risk_free_rate)
    print(f"2. Sortino Ratio: {sortino:.4f}")

    # 3. Maximum Drawdown
    mdd = max_drawdown(daily_portfolio_returns)
    print(f"3. Maximum Drawdown: {mdd:.4f} ({mdd*100:.2f}%)")

    # 4. Calmar Ratio
    calmar = calmar_ratio(daily_portfolio_returns, annual_risk_free_rate)
    print(f"4. Calmar Ratio: {calmar:.4f}")

    # 5. Beta
    portfolio_beta = beta(daily_portfolio_returns, daily_market_returns)
    print(f"5. Beta (vs Market): {portfolio_beta:.4f}")

    # 6. Jensen's Alpha
    j_alpha = jensens_alpha(daily_portfolio_returns, daily_market_returns, annual_risk_free_rate)
    print(f"6. Jensen's Alpha (annualized): {j_alpha:.4f}")

    # 7. Treynor Ratio
    treynor = treynor_ratio(daily_portfolio_returns, daily_market_returns, annual_risk_free_rate)
    print(f"7. Treynor Ratio: {treynor:.4f}")

    # 8. Value at Risk (VaR) - Daily 95% VaR
    var_95 = value_at_risk(daily_portfolio_returns, confidence_level=0.95)
    print(f"8. Value at Risk (95% Daily VaR): {var_95:.4f} ({var_95*100:.2f}%)")
    # For a 1-month VaR (approx 20 trading days), you would need to adjust the returns standard deviation
    # and mean over that period. A simple scaling for N periods:
    # VaR_N = VaR_daily * sqrt(N) -- this is a rough approximation assuming i.i.d. returns.

    # 9. Compound Annual Growth Rate (CAGR)
    c_agr = cagr(initial_portfolio_value, final_portfolio_value, total_years)
    print(f"9. CAGR (Initial: {initial_portfolio_value:.2f}, Final: {final_portfolio_value:.2f}): {c_agr:.4f} ({c_agr*100:.2f}%)")


    print("\n--- Interpretation Hints ---")
    print("Sharpe Ratio: Higher is better, indicates better risk-adjusted return (total risk).")
    print("Sortino Ratio: Higher is better, focuses on downside risk.")
    print("Maximum Drawdown: Closer to 0 is better, indicates less severe losses from peak.")
    print("Calmar Ratio: Higher is better, measures return relative to max drawdown.")
    print("Beta: >1 more volatile than market, <1 less volatile, =1 moves with market.")
    print("Jensen's Alpha: Positive means portfolio outperformed CAPM's expected return.")
    print("Treynor Ratio: Higher is better, measures return relative to systematic risk.")
    print("Value at Risk (VaR): Estimates worst expected loss over a time frame at a confidence level.")
    print("CAGR: Smoothed average annual growth rate over the investment period.")
